pipeline {
    agent {
        label('WINDOWS')
    }
    
    environment {
        SONAR_SCANNER = tool 'SonarScanner'
        SONAR_HOST_URL = 'http://192.168.0.81:9000'
        SONAR_TOKEN = credentials('sonar-token')
    }

    stages {
        stage('Clone') {
            steps {
                bat 'git clone https://github.com/fkoler/angular-qrcode-generator.git'
            }
        }

        stage('Install') {
            steps {
                dir('angular-qrcode-generator') {
                    bat 'npm install'
                }
            }
        }

        stage('Build') {
            steps {
                dir('angular-qrcode-generator') {
                    bat 'ng build --prod'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('angular-qrcode-generator') {
                    bat '''
                        ${SONAR_SCANNER}/bin/sonar-scanner ^
                        -Dsonar.projectKey=angular-qrcode-generator ^
                        -Dsonar.sources=src ^
                        -Dsonar.host.url=%SONAR_HOST_URL% ^
                        -Dsonar.login=%SONAR_TOKEN%
                    '''
                }
            }
        }

        stage('Create Zip') {
            steps {
                dir('angular-qrcode-generator') {
                    script {
                        def pythonScript = '''
import os
import zipfile
from datetime import datetime

def create_zip(folder_path):
    if not os.path.exists(folder_path):
        print(f"Error: Folder '{folder_path}' not found.")
        return None
    timestamp = datetime.now().strftime("%Y%m%d%H%M")  
    zip_filename = f"angular_build_{timestamp}.zip"
    try:
        with zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, _, files in os.walk(folder_path):
                for file in files:
                    file_path = os.path.join(root, file)
                    arcname = os.path.relpath(file_path, folder_path)
                    zipf.write(file_path, arcname)
        print(f"Created zip: {zip_filename}")
        return zip_filename
    except Exception as e:
        print(f"Error: {e}")
        return None

zip_name = create_zip("dist")
if zip_name:
    with open("zip_name.txt", "w") as f:
        f.write(zip_name)
'''
                        writeFile file: 'create_zip.py', text: pythonScript
                        bat 'python create_zip.py'
                    }
                }
            }
        }

        stage('Upload to Nexus') {
            steps {
                script {
                    def zipFileName = readFile('angular-qrcode-generator\\zip_name.txt').trim()
                    def zipFilePath = "angular-qrcode-generator\\${zipFileName}"

                    dir('angular-qrcode-generator') {
                        bat 'dir'
                        if (fileExists(zipFilePath)) {
                            echo "Uploading ${zipFileName} to Nexus..."
                            bat "curl -u admin:admin --upload-file ${zipFilePath} http://192.168.0.81:8081/repository/jenkins/1.0/angular/${zipFileName}"
                        } else {
                            error "Zip file not found: ${zipFileName}"
                        }
                    }
                }
            }
        }

        stage('Download Latest Build from Nexus') {
            steps {
                script {
                    bat 'curl -L -o Angular_build.zip "http://192.168.0.81:8081/service/rest/v1/search/assets/download?sort=name&direction=desc&repository=jenkins&format=raw&group=%2F1.0%2Fangular'
                }
            }
        }
    }
}
